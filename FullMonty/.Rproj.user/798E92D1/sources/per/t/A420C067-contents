---
title: "compare_2_fa"
author: "Carl Fortelius"
format: html
editor: visual
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Code

### Libriaries:

```{r, echo=FALSE, "libraries"}
library(here) 
library(harp) 
library(dplyr) 
library(forcats) 
library(scico) 
library(Rfa) 
library(stringr)
```

### Functions:

```{r, echo=FALSE, "functions"}

    my_plot_chart <- function(pv, label, title, zoom_radius, zoom_centre) {
    #png(filename =  paste(label,"_chart.png",sep=""),
        #width = 700, height = 700, units = "px") #, pointsize = 12,
     #bg = "white",  res = NA, ...,
    #type = c("cairo", "cairo-png", "Xlib", "quartz"), antialias)
    #plot_field(pv ,breaks=c(0,0.03,0.06,0.09,0.12,0.15,0.18,0.21) )
    if (zoom_radius == 0){
	    plot_field(pv,title=title)
    } else {
            plot_field(pv,zoom_centre=zoom_centre, zoom_radius=zoom_radius,
	    title=title)}

    #dev.off()
    print(paste("created ", paste(label,"_chart.png",sep="")))
    }





    my_plot_histo <- function(pv,label,zoom_radius,lonc,latc){
    # Deal with sub-domain:
    if (zoom_radius == 0){ 
	hisvar <- pv
    } else {         
        zc <- round(meteogrid::point.index(pv, lonc,latc))
        ix1 <- zc$i-zoom_radius
        ix2 <- zc$i+zoom_radius
        jy1 <- zc$j-zoom_radius
        jy2 <- zc$j+zoom_radius
	hisvar <- pv[ix1:ix2,jy1:jy2] 
    }
    #png(paste(label,"_histo.png",sep=""))
    #title <- paste(
    #  attr(T2M[[i]],"info")$name,
    #  "\n",
    #  format(attr(T2M[[i]], "info")$time$basedate, "%H:%M %d %b %Y"),
    #  "+",
    #  paste0(
    #    attr(T2M[[i]],"info")$time$leadtime, attr(T2M[[i]],"info")$time$stepUnit
    #  )
    #  )
    hisdat <- data.frame(values = c(as.vector(hisvar)))
  
    histo <- ggplot(hisdat, aes(x = values)) +                       # Draw overlaying histogram
           geom_histogram(position = "identity", alpha = 0.2, bins = 50)	
    #hist(T2M[[i]],col='lightcyan',main=title)
    print(histo)
    print(paste("created ",paste(label,"_histo.png",sep=""), sep=""))
		#dev.off()
     }
    
    
    my_plot_histo2 <- function(pv1,pv2,label_1,label_2,zoom_radius,lonc,latc){
    # Deal with sub-domain:
    if (zoom_radius == 0){ 
	hisvar_1 <- pv1
	hisvar_2 <- pv2}
    else {         
        zc <- round(meteogrid::point.index(P1, lonc,latc))
        ix1 <- zc$i-zoom_radius
        ix2 <- zc$i+zoom_radius
        jy1 <- zc$j-zoom_radius
        jy2 <- zc$j+zoom_radius
	hisvar_1 <- pv1[ix1:ix2,jy1:jy2] 
	hisvar_2 <- pv2[ix1:ix2,jy1:jy2] }
 
    #png(paste(paste(label_1,label_2,sep="&"),"_histo.png",sep=""))
    #title <- paste(
    #  attr(T2M[[i]],"info")$name,
    #  "\n",
    #  format(attr(T2M[[i]], "info")$time$basedate, "%H:%M %d %b %Y"),
    #  "+",
    #  paste0(
    #    attr(T2M[[i]],"info")$time$leadtime, attr(T2M[[i]],"info")$time$stepUnit
    #  )
    #  )
    hisdat <- data.frame(values = c(as.vector(hisvar_1),as.vector(hisvar_2)),
                          group = c(rep(paste(trimws(attr(P1,"info")$name),"1",sep="_"),length(hisvar_1)),
			            rep(paste(trimws(attr(P2,"info")$name),"2",sep="_"),length(hisvar_2) )))

    print(length(hisvar_1))
    print(length(hisvar_2))
    histo <- ggplot(hisdat, aes(x = values, fill = group)) +                       # Draw overlaying histogram
             geom_histogram(position = "identity", alpha = 0.2, bins = 50) 
          #+scale_y_log10()
    #hist(T2M[[i]],col='lightcyan',main=title)
    print(histo)
    print(paste("created ",paste(label_1,label_2,sep="&"),"_histo.png",sep=""))
    #dev.off()
    }
    
    
    my_plot_cumhisto2 <- function(pv1,pv2,label_1,label_2,zoom_radius,lonc,latc){
    # Deal with sub-domain:
    if (zoom_radius == 0){ 
	hisvar_1 <- as.vector(pv1)
	hisvar_2 <- as.vector(pv2)}
    else {         
        zc <- round(meteogrid::point.index(P1, lonc,latc))
        ix1 <- zc$i-zoom_radius
        ix2 <- zc$i+zoom_radius
        jy1 <- zc$j-zoom_radius
        jy2 <- zc$j+zoom_radius
	hisvar_1 <- as.vector(pv1[ix1:ix2,jy1:jy2]) 
	hisvar_2 <- as.vector(pv2[ix1:ix2,jy1:jy2]) }
  hisvar_1 <- hisvar_1[!is.nan(hisvar_1)]
  hisvar_2 <- hisvar_2[!is.nan(hisvar_2)]
  
   
  # Create data frames with cumulative frequencies for both vectors
 df1 <- data.frame(x = sort(hisvar_1), cum_freq = seq_along(hisvar_1) / length(hisvar_1))
 df2 <- data.frame(x = sort(hisvar_2), cum_freq = seq_along(hisvar_2) / length(hisvar_2))

# Combine data frames
df_combined <- rbind(transform(df1, vector = "hisvar_1"), transform(df2, vector = "hisvar_2"))

# Plot the cumulative distribution functions using geom_step
  cumhisto <- ggplot(df_combined, aes(x = x, y = cum_freq, color = vector)) +
  geom_step() +
  labs(x = "Data", y = "Cumulative Frequency", title = "Cumulative Distribution Functions") +
  scale_color_manual(values = c("hisvar_1" = "blue", "hisvar_2" = "red")) #+
  #scale_x_log10()
  print(cumhisto)   
   
     }

    my_plot_histo2 <- function(pv1,pv2,label_1,label_2,zoom_radius,lonc,latc){
    # Deal with sub-domain:
    if (zoom_radius == 0){ 
	hisvar_1 <- pv1
	hisvar_2 <- pv2}
    else {         
        zc <- round(meteogrid::point.index(P1, lonc,latc))
        ix1 <- zc$i-zoom_radius
        ix2 <- zc$i+zoom_radius
        jy1 <- zc$j-zoom_radius
        jy2 <- zc$j+zoom_radius
	hisvar_1 <- pv1[ix1:ix2,jy1:jy2] 
	hisvar_2 <- pv2[ix1:ix2,jy1:jy2] }
 
    #png(paste(paste(label_1,label_2,sep="&"),"_histo.png",sep=""))
    #title <- paste(
    #  attr(T2M[[i]],"info")$name,
    #  "\n",
    #  format(attr(T2M[[i]], "info")$time$basedate, "%H:%M %d %b %Y"),
    #  "+",
    #  paste0(
    #    attr(T2M[[i]],"info")$time$leadtime, attr(T2M[[i]],"info")$time$stepUnit
    #  )
    #  )
    hisdat <- data.frame(values = c(as.vector(hisvar_1),as.vector(hisvar_2)),
                          group = c(rep(paste(trimws(attr(P1,"info")$name),"1",sep="_"),length(hisvar_1)),
			            rep(paste(trimws(attr(P2,"info")$name),"2",sep="_"),length(hisvar_2) )))

    print(length(hisvar_1))
    print(length(hisvar_2))
    histo <- ggplot(hisdat, aes(x = values, fill = group)) +                       # Draw overlaying histogram
             geom_histogram(position = "identity", alpha = 0.2, bins = 50) 
          #+scale_y_log10()
    #hist(T2M[[i]],col='lightcyan',main=title)
    print(histo)
    print(paste("created ",paste(label_1,label_2,sep="&"),"_histo.png",sep=""))
    #dev.off()
     }


    my_plot_scatter <- function(pv1,pv2,label_1,label_2,zoom_radius,lonc,latc){
    # Deal with sub-domain:
    if (zoom_radius == 0){ 
	hisvar_1 <- pv1
	hisvar_2 <- pv2}
    else {         
        zc <- round(meteogrid::point.index(P1, lonc,latc))
        ix1 <- zc$i-zoom_radius
        ix2 <- zc$i+zoom_radius
        jy1 <- zc$j-zoom_radius
        jy2 <- zc$j+zoom_radius
	hisvar_1 <- pv1[ix1:ix2,jy1:jy2] 
	hisvar_2 <- pv2[ix1:ix2,jy1:jy2] }

    #png(paste(paste(label_1,label_2,sep="&"),"_scatter.png",sep=""))
    # title <- paste(
    #   "T2M\n",
    #   format(attr(T2M[[1]], "info")$time$basedate, "%H:%M %d %b %Y"),
    #   "+",
    #   paste0(
    #     attr(T2M[[1]],"info")$time$leadtime, attr(T2M[[1]],"info")$time$stepUnit
    #   ))
    scatter <- ggplot(data=NULL, aes(x = as.vector(hisvar_1), y = as.vector(hisvar_2))) +
    geom_hex() +
    theme_bw() +
    geom_abline(
    mapping = NULL,
    data = NULL,
    1,
    0,
    na.rm = FALSE,
    show.legend = NA
)


  print(scatter)
  print(paste("created ",paste(label_1,label_2,sep="vs"),"_scatter.png",sep=""))
  #dev.off()
    }
```

### Selections (input files, parameters):

```{r, echo=FALSE, "settings"}
# Controlling keys, may contain wild cards
#YYYY <- args[1]; MM <- args[2]; DD <- args[3];  HH <- args[4]; MBR <- args[5]; file <- args[6]
#ctrl <- paste(YYYY,MM,DD,HH,MBR,file,sep="/")
#file_key_1 <- "/home/forteliu/lustre/tmp/cooper/harmonie/MEPS_prod/archive/2022/08/25/00/mbr009/ICMSHHARM+0012.sfx"
#file_key_2 <- "/home/forteliu/lustre/tmp/cooper/harmonie/MEPS_prod/archive/2022/08/25/00/mbr009/ICMSHHARM+0024.sfx"
#data_root <- "/home/forteliu/Bologna/hm_home/cy46_AUSTRIA500_Patrick/archive" 
data_root <- "/home/forteliu/DataFiles/MEPS/2023/06/26/00/mbr000"
file_key_1 <- paste(data_root,"ICMSHHARM+0003.sfx",sep="/")
file_key_2 <- paste(data_root,"ICMSHHARM+0003.sfx",sep="/")
#file_key_2 <- paste(data_root,"2022/07/01/00/ICMSHHARM+0012",sep="/")
files_1 <- system(paste("ls", file_key_1), intern=TRUE) #; print(files_1)
files_2 <- system(paste("ls", file_key_2), intern=TRUE) #; print(files_2)
if (length(files_1) != length(files_2)){ stop("The lengths of your file lists fo not match!")}

# FA-names of two parameters:
fa_name_1 <- str_pad(paste("SFX.T2M_TEB"), 16, 'right', pad=' ')
fa_name_2 <- str_pad(paste("SFX.T2M_ISBA"), 16, 'right', pad=' ')

Inventory_1 <- FAopen(files_1[1])$list$name
WGI <- Inventory_1[grep("WGI", Inventory_1)]
T2M <- Inventory_1[grep("T2M", Inventory_1)]
TEB <- Inventory_1[grep("TEB", Inventory_1)]


#print (files)
#print(plotvars)
offset <- -273.15
scale <- 1 #1./(3600*48)
zclon <- 25.75
zclat <- 62.24
zrad <- 100
```

### Reading data:

```{r, echo=FALSE, "read the data into memory"}
for (i in seq_along(files_1)){
# read in and get rid of missing data integer code	
    P1 <- read_grid( files_1[i], fa_name_1, file_format = "fa")#; print(P1)
    P1 <- scale*(P1 + 0/(1e20-P1)) + offset
    P2 <- read_grid( files_2[i], fa_name_2, file_format = "fa")#; print(P2)
    P2 <- scale*(P2 + 0/(1e20-P2)) + offset
}
```

### Deal with titles and labels:

```{r, echo=FALSE, "deal with titles and labels, echo=FALSE"}
    
# Deal with titles and labels... 
    #print(attr(P2,"info"))
    label_1 <- paste(trimws(attr(P1, "info")$name), paste(format(attr(P1, "info")$time$basedate,"%Y%m%d%H:%M"),
			   attr(P1,"info")$time$forecast, sep=""), sep="@")
    label_2 <- paste(trimws(attr(P2, "info")$name), paste(format(attr(P2, "info")$time$basedate,"%Y%m%d%H:%M"),
			   attr(P2,"info")$time$forecast, sep=""), sep="@")
```

### Select common grid squares

```{r, echo=FALSE, "select common grid squares, echo=FALSE"}
# Select only common grid-squares:
    P1 <- P1 + 0*P2
    P2 <- P2 + 0*P1

#print(P1)
#print(P2)
#print(label_1, label_2)
```

### Do the plots

#### charts:

```{r,fig.width=12, fig.height=12, echo=FALSE, "charts" }

# Plot charts of P1, P2, and F(P1,P2)
    my_plot_chart(P1, label_1, "auto",zrad, c(zclon,zclat))
    my_plot_chart(P2, label_2, "auto", zrad, c(zclon,zclat))
    my_plot_chart(P2-P1, paste(label_2,label_1,sep="-"), paste(label_2,label_1,sep="-"), zrad, c(zclon,zclat))
```

#### histograms

```{r,, echo=FALSE, "Histograms"}
    my_plot_histo2(P1,P2,label_1,label_2,zrad,zclon,zclat)    
    my_plot_histo(P2-P1,paste(label_2,label_1,sep="-"),zrad,zclon,zclat)
```

#### cumulative histograms

```{r, echo=FALSE, "Cumulative histograms"}
my_plot_cumhisto2(P1,P2,label_1,label_2,zrad,zclon,zclat)
```

#### scatter plot

```{r, echo=FALSE, "Scatter plot"}
    my_plot_scatter(P1,P2,label_1,label_2,zrad,zclon,zclat)

```

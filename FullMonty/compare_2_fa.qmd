---
title: "compare_2_fa"
author: "Carl Fortelius"
format: html
editor: visual
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Code

### Libriaries:

```{r, echo=FALSE, "libraries"}
library(here) 
library(harp) 
library(dplyr) 
library(forcats) 
library(scico) 
library(Rfa) 
library(stringr)
library(sf)
library(rnaturalearth)

```

### Functions:

```{r, echo=FALSE, "functions"}

my_plot_chart <- function(pv, 
                              title = NULL, 
                              rivers = NULL,
                              lakes = NULL,
                              towns = NULL,
                              roads = NULL,
                              breaks = NULL) {
  if (!is.null(breaks)){
    common_scale <- scale_fill_viridis_c(
    option = "viridis",   # Choose a palette option ("viridis", "plasma", "magma", etc.)
    limits = c(min(breaks), max(breaks)),   # Fixed color scale limits
    breaks = breaks)} else {
      common_scale <- NULL}
    
  plot(pv) +
    common_scale + 
  #geom_polygon(
  #aes(x, y, group = group), lakes,
  #fill = "skyblue3", colour = "blue", inherit.aes = FALSE
  #) +
  #geom_path(aes(x, y), rivers, colour = "blue", inherit.aes = FALSE) +
  geom_path(aes(x, y), roads, colour = "red",inherit.aes = FALSE ) +
    
  ggtitle(title)      
      
    }





    my_plot_histo <- function(pv,label){
    # Deal with sub-domain:
    
    hisdat <- data.frame(values = c(as.vector(pv$gridded_data[[1]])))
  
    histo <- ggplot(hisdat, aes(x = values)) + 
           geom_histogram(position = "identity", alpha = 0.2, bins = 50) +
      scale_y_log10() +
      ggtitle(label)
    #hist(T2M[[i]],col='lightcyan',main=title)
    print(histo)
    #print(paste("created ",paste(label,"_histo.png",sep=""), sep=""))
		#dev.off()
     }
    
    
    my_plot_histo2 <- function(pv1,pv2,label_1,label_2){
   
    hisdat <- data.frame(values = c(as.vector(pv1$gridded_data[[1]]),
                                    as.vector(pv2$gridded_data[[1]])),
                          group = c(rep(paste(trimws(pv1$parameter),"1",
                                    sep="_"),
                                    length(pv1$gridded_data[[1]])),
			                              rep(paste(trimws(pv2$parameter),"2",
			                              sep="_"),
			                              length(pv2$gridded_data[[1]]) )))

    print(length(pv1$gridded_data[[1]]))
    print(length(pv2$gridded_data[[1]]))
    histo <- ggplot(hisdat, aes(x = values, fill = group)) +  # Draw overlaying histogram
             geom_histogram(position = "identity", alpha = 0.2, bins = 50) +
             scale_y_log10()
    print(histo)
    #print(paste("created ",paste(label_1,label_2,sep="&"),"_histo.png",sep=""))
    #dev.off()
    }
    
    
    my_plot_cumhisto2 <- function(pv1,pv2,label_1,label_2){
    # Deal with sub-domain:
    
      
  hisvar_1 <- pv1$gridded_data[[1]][!is.nan(pv1$gridded_data[[1]]) & 
                         !is.na(pv1$gridded_data[[1]])]
  hisvar_2 <- pv2$gridded_data[[1]][!is.nan(pv2$gridded_data[[1]]) &
                         !is.na(pv2$gridded_data[[1]])]

   
  # Create data frames with cumulative frequencies for both vectors
 df1 <- data.frame(x = sort(hisvar_1), cum_freq = seq_along(hisvar_1) / length(hisvar_1))
 df2 <- data.frame(x = sort(hisvar_2), cum_freq = seq_along(hisvar_2) / length(hisvar_2))

# Combine data frames
df_combined <- rbind(transform(df1, vector = "hisvar_1"), transform(df2, vector = "hisvar_2"))

# Plot the cumulative distribution functions using geom_step
  cumhisto <- ggplot(df_combined, aes(x = x, y = cum_freq, color = vector)) +
  geom_step() +
  labs(x = "Data", y = "Cumulative Frequency", title = "Cumulative Distribution Functions") +
  scale_color_manual(values = c("hisvar_1" = "blue", "hisvar_2" = "red")) #+
  #scale_x_log10()
  print(cumhisto)   
   
     }



    my_plot_scatter <- function(pv1,pv2,
                                title = NULL ,
                                lable_1 = NULL, 
                                lable_2 = NULL){

     scatter <- ggplot(data=NULL, aes(x = as.vector(pv1$gridded_data[[1]]), 
                                      y = as.vector(pv2$gridded_data[[1]]))) +
    geom_hex(position = "identity")       +
        scale_fill_viridis_c(
          option = "magma", 
          name   = "Frequency", 
          trans  = "log",
          breaks = seq_double(1, 20),
          labels = function(x) format(x, scientific = FALSE,
                                      trim = TRUE),
        ) +
        geom_abline(intercept = 0, slope = 1, color = "black", linetype = "solid") +
        labs(x = pv1$parameter, 
             y = pv2$parameter, 
             title = title)



  print(scatter)
  print(paste("created ",paste(lable_1,lable_2,sep="vs"),"_scatter.png",sep=""))
  #dev.off()
    }
```

### Selections (input files, parameters):

```{r, echo=FALSE, "settings"}
# Controlling keys, may contain wild cards

#data_root <- "/home/forteliu/DataFiles/MEPS/2023/06/26/00/mbr000"
#data_root <- "/home/forteliusc/DataFiles/" 

path_1 <- "/ec/res4/scratch/fnm"
path_2 <- "/ec/res4/scratch/fnm"


exp_1 <- "MEPS_prod_warmstart"
exp_2 <- "MEPS_prod_warmstart"

file_key_1 <- paste(path_1, exp_1, "2024/01/17/21/mbr000/ICMSHHARM+0003.sfx",sep="/")
file_key_2 <- paste(path_2, exp_2, "2024/01/17/21/mbr000/ICMSHHARM+0003.sfx",sep="/")

files_1 <- system(paste("ls", file_key_1), intern=TRUE) #; print(files_1)
files_2 <- system(paste("ls", file_key_2), intern=TRUE) #; print(files_2)
if (length(files_1) != length(files_2)){ stop("The lengths of your file lists fo not match!")}

# FA-names of two parameters:
fa_name_1 <- str_pad(paste("X001SNOWLIQ1"), 16, 'right', pad=' ')
fa_name_2 <- str_pad(paste("X002SNOWLIQ1"), 16, 'right', pad=' ')

fa_name_1 <- str_pad(paste("X001T2M_P"), 16, 'right', pad=' ')
fa_name_2 <- str_pad(paste("X002T2M_P"), 16, 'right', pad=' ')

fa_name_1 <- str_pad(paste("SFX.T2M"), 16, 'right', pad=' ')
fa_name_2 <- str_pad(paste("X001T2M_P"), 16, 'right', pad=' ')

fa_name_1 <- str_pad(paste("X001T2M_P"), 16, 'right', pad=' ')
fa_name_2 <- str_pad(paste("X002T2M_P"), 16, 'right', pad=' ')

fa_name_1 <- str_pad(paste("X001WSN_VEG1"), 16, 'right', pad=' ')
fa_name_2 <- str_pad(paste("X002WSN_VEG1"), 16, 'right', pad=' ')

fa_name_1 <- str_pad(paste("X001HC_P"), 16, 'right', pad=' ')
fa_name_2 <- str_pad(paste("X002HC_P"), 16, 'right', pad=' ')

fa_name_1 <- str_pad(paste("SURFRESERV.NEIGE"), 16, 'right', pad=' ')
fa_name_2 <- str_pad(paste("SURFRESERV.NEIGE"), 16, 'right', pad=' ')

fa_name_1 <- str_pad(paste("SURFPRESSION"), 16, 'right', pad=' ')
fa_name_2 <- str_pad(paste("SURFPRESSION"), 16, 'right', pad=' ')


fa_name_1 <- str_pad(paste("SURFINSPLUIE"), 16, 'right', pad=' ')
fa_name_2 <- str_pad(paste("SURFINSPLUIE"), 16, 'right', pad=' ')

fa_name_1 <- str_pad(paste("SURFACCPLUIE"), 16, 'right', pad=' ')
fa_name_2 <- str_pad(paste("SURFACCPLUIE"), 16, 'right', pad=' ')

fa_name_1 <- str_pad(paste("SURFNEBUL.BASSE"), 16, 'right', pad=' ')
fa_name_2 <- str_pad(paste("SURFNEBUL.BASSE"), 16, 'right', pad=' ')

fa_name_1 <- str_pad(paste("SURFRAYT.SOLAIRE"), 16, 'right', pad=' ')
fa_name_2 <- str_pad(paste("SURFRAYT.SOLAIRE"), 16, 'right', pad=' ')

fa_name_1 <- str_pad(paste("SURFRAYT.TERREST"), 16, 'right', pad=' ')
fa_name_2 <- str_pad(paste("SURFRAYT.TERREST"), 16, 'right', pad=' ')

fa_name_1 <- str_pad(paste("S001RAYT SOL CL "), 16, 'right', pad=' ')
fa_name_2 <- str_pad(paste("S065RAYT SOL CL "), 16, 'right', pad=' ')


fa_name_1 <- str_pad(paste("SFX.T2M"), 16, 'right', pad=' ')
fa_name_2 <- str_pad(paste("SFX.T2M"), 16, 'right', pad=' ')

fa_name_1 <- str_pad(paste("SFX.DSN_T_ISBA"), 16, 'right', pad=' ')
fa_name_2 <- str_pad(paste("SFX.DSN_T_ISBA"), 16, 'right', pad=' ')

fa_name_1 <- str_pad(paste("SFX.GFLUX"), 16, 'right', pad=' ')
fa_name_2 <- str_pad(paste("SFX.GFLUX"), 16, 'right', pad=' ')

fa_name_1 <- str_pad(paste("SURFPRESSION"), 16, 'right', pad=' ')
fa_name_2 <- str_pad(paste("SURFPRESSION"), 16, 'right', pad=' ')


fa_name_1 <- str_pad(paste("SPECSURFGEOPOTEN"), 16, 'right', pad=' ')
fa_name_2 <- str_pad(paste("SPECSURFGEOPOTEN"), 16, 'right', pad=' ')

fa_name_1 <- str_pad(paste("CLSVENT.ZONAL"), 16, 'right', pad=' ')
fa_name_2 <- str_pad(paste("CLSVENT.ZONAL"), 16, 'right', pad=' ')

fa_name_1 <- str_pad(paste("SFX.GFLUXC_ISBA"), 16, 'right', pad=' ')
fa_name_2 <- str_pad(paste("SFX.GFLUXC_ISBA"), 16, 'right', pad=' ')

fa_name_1 <- str_pad(paste("SURFNEBUL.BASSE"), 16, 'right', pad=' ')
fa_name_2 <- str_pad(paste("SURFNEBUL.BASSE"), 16, 'right', pad=' ')

fa_name_1 <- str_pad(paste("S001RAYT THER CL "), 16, 'right', pad=' ')
fa_name_2 <- str_pad(paste("S065RAYT THER CL "), 16, 'right', pad=' ')

fa_name_1 <- str_pad(paste("SOMMFLU.RAY.SOLA"), 16, 'right', pad=' ')
fa_name_2 <- str_pad(paste("SOMMFLU.RAY.SOLA"), 16, 'right', pad=' ')

fa_name_1 <- str_pad(paste("CLSTEMPERATURE"), 16, 'right', pad=' ')
fa_name_2 <- str_pad(paste("CLSTEMPERATURE"), 16, 'right', pad=' ')

fa_name_1 <- str_pad(paste("SFX.T2M"), 16, 'right', pad=' ')
fa_name_2 <- str_pad(paste("SFX.T2M_ISBA"), 16, 'right', pad=' ')

Inventory_1 <- FAopen(files_1[1])$list$name
#Inventory_2 <- FAopen(files_2[1])$list$name

WGI <- Inventory_1[grep("WGI", Inventory_1)]
T2M <- Inventory_1[grep("T2M", Inventory_1)]
TEB <- Inventory_1[grep("TEB", Inventory_1)]
CLS <- Inventory_1[grep("CLS", Inventory_1)]
SNO <- Inventory_1[grep("SNOW", Inventory_1)]
VEG <- Inventory_1[grep("VEG", Inventory_1)]
FLX <- Inventory_1[grep("FLUX", Inventory_1)]
H  <- Inventory_1[grep("H", Inventory_1)]
WAT <- Inventory_1[grep("WAT", Inventory_1)]

#print (files)
#print(plotvars)
offset <- -273.15
scale <- 1 #1./(3600*48)
transformation <- "identity" #"abs"
#Modifyers are applied according to the template: transformation(scale*x + offset)


chart_breaks = NULL# c(-33,-32, -31, -30, -29, -28, -27, -26, -25, -24, -23, -22, -21)
```

Set the domain:

```{r}
zclon <- 25.80
zclat <- 66.50
zrad <- 0#15#100

```

### Reading data:

```{r, echo=FALSE, "read the data into memory"}
for (i in seq_along(files_1)){
# read in and get rid of missing data integer code, regrid if needed
    P1 <- read_grid( files_1[i],
                     fa_name_1,
                     file_format = "fa",
                     data_frame = TRUE)#; print(P1)
    P1$gridded_data[[1]] <- do.call(transformation, 
                       list(scale*(P1$gridded_data[[1]] + 
                                     0/(1e20-P1$gridded_data[[1]])) +
                       offset))
    
    P2 <- read_grid( files_2[i], 
                     fa_name_2, 
                     file_format = "fa",
                     data_frame = TRUE)#; print(P2)
#    P2 <- read_grid( files_2[i], "z", "heightAboveGround", file_format = "grib")#; print(P2)
#   P2 <- read_grid(files_2[i], "z",
#                    file_format_opts = grib_opts(
#         level_find = list(z = use_grib_typeOfLevel("heightAboveGround", 0))),
#         file_format = "grib")#; print(P2)
    P2$gridded_data[[1]] <-  do.call(transformation,
                        list(scale*(P2$gridded_data[[1]] + 
                                      0/(1e20-P2$gridded_data[[1]])) +
                        offset))
    if (!identical(attributes(P1$gridded_data)$domain, 
                   attributes(P2$gridded_data)$domain)){
    P1$gridded_data <- regrid(P1$gridded_data,P2$gridded_data)
    }
    if (zrad > 0 ) {
    #stopifnot(length(zoom_centre) == 2)
    #stopifnot(is.numeric(zoom_centre))
    P1 <- harpCore::geo_zoom(
      P1, zclon, zclat, zrad, zrad
    )
    P2 <- harpCore::geo_zoom(
      P2, zclon, zclat, zrad, zrad
    )
  }
    


    }
```

Define physiographics:

```{r, echo=FALSE, "Define physiographic characters, echo=FALSE"}}

# Download and reproject rivers, lakes, towns, roads data
rivers <- get_map(
  P1$gridded_data,
  as_Spatial(
    ne_download(scale = 10, type = "rivers_europe", category = "physical")
  ),
  polygon = FALSE
)

lakes <- get_map(
  P1$gridded_data,
  as_Spatial(
    ne_download(scale = 10, type = "lakes_europe", category = "physical")
  )
)

towns <- get_map(
  P1$gridded_data,
  as_Spatial(
    ne_download(scale = 10, type = "urban_areas", category = "cultural")
  )
)
roads <- get_map(
  P1$gridded_data,
  as_Spatial(
    ne_download(scale = 10, type = "roads", category = "cultural")
  ),
  polygon = FALSE
)
```

Trim the experiment name for this special case

```{r}
exp_1 <- "MEPS"
exp_2 <- "MEPS"
```

### Deal with titles and labels:

```{r, echo=FALSE, "deal with titles and labels, echo=FALSE"}

# Deal with titles and labels... 
#print(attr(P2,"info"))
what_1 <- paste(exp_1, 
                trimws(P1$parameter),
                sep=" ") 

when_1 <- paste("fc ", format(P1$fcst_dttm, "%H:%M %Y-%m-%d"),
                "+", 
                P1$lead_time, "h, valid ", 
                format(P1$valid_dttm, "%H:%M  %Y-%m-%d"),   
                sep="")
title_1 <- paste(what_1, when_1,sep="\n")

what_2 <- paste(exp_2, 
                trimws(P2$parameter),
                sep=" ") 
when_2 <- paste("fc ", format(P2$fcst_dttm, "%H:%M %Y-%m-%d"),
                "+", 
                P2$lead_time, "h, valid ", 
                format(P1$valid_dttm, "%H:%M  %Y-%m-%d"),   
                sep="")
title_2 <- paste(what_2, when_2,sep="\n")

if (what_1 == what_2){
  delta_title <- paste(
    what_1,
    paste(when_2,when_1,sep=" - ")
    ,sep=" \n")
} else if (when_1 == when_2){
  delta_title <- paste(
    paste(what_2,what_1,sep=" - "),
    when_1, 
    sep=" \n ")
} else{
  delta_title <- paste(
    paste(
      what_1,
      when_1,
      sep=":"),
    paste(
      what_2,
      when_2,
      sep=": "),
    sep=" -\n "
  )
}

```

### Select common grid squares

```{r, echo=FALSE, "select common grid squares, echo=FALSE"}
# Select only common grid-squares:
    P1$gridded_data[[1]] <- P1$gridded_data[[1]] + 0*P2$gridded_data[[1]]
    P2$gridded_data[[1]] <- P2$gridded_data[[1]] + 0*P1$gridded_data[[1]]

#print(P1)
#print(P2)
#print(label_1, label_2)
```

### Do the plots

#### charts:

```{r,fig.width=12, fig.height=12, echo=FALSE, "charts" }

# Plot charts of P1, P2, and F(P1,P2)
    my_plot_chart(P1, 
                  title=paste(what_1,when_1,sep=" \n "),
                  rivers=rivers,
                  roads=roads,
                  breaks = chart_breaks)
    my_plot_chart(P2, 
                  title=paste(what_2,when_2,sep=" \n "), 
                  rivers=NULL,
                  roads=roads,
                  breaks = chart_breaks)
    delta = P2
    delta$gridded_data <- delta$gridded_data - P1$gridded_data
    my_plot_chart(delta, 
                  title=delta_title,
                  rivers=NULL,
                  roads = roads,
                  lakes = lakes,
                  breaks=NULL
                  )
```

#### histograms

```{r,, echo=FALSE, "Histograms"}
    my_plot_histo2(P1, P2, title_1, title_2)    
    my_plot_histo(delta,delta_title)
```

#### cumulative histograms

```{r, echo=FALSE, "Cumulative histograms"}
my_plot_cumhisto2(P1,P2,label_1,label_2)
```

#### scatter plot

```{r, echo=FALSE, "Scatter plot"}
    my_plot_scatter(P1,P2,title=NULL, lable_1 = title_1, lable_2=title_2)

```
